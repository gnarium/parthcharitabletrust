{"ast":null,"code":"import initDB from '../../helpers/initDB';\nimport User from '../../models/User';\nimport bcrypt from 'bcryptjs';\ninitDB();\nexport default (async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n\n  try {\n    if (!name || !email || !password) {\n      return res.status(422).json({\n        error: \"Please all the field\"\n      });\n    }\n\n    const user = await User.findOne({\n      email\n    });\n\n    if (user) {\n      return res.status(422).json({\n        error: \"User Already exists with the email\"\n      });\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 12);\n    const newUser = await new User({\n      name,\n      email,\n      password: hashedPassword\n    }).save();\n    console.log(newUser);\n    res.status(201).json({\n      message: \"Signup Successfully\"\n    });\n  } catch (err) {\n    console.log(err);\n  }\n});","map":{"version":3,"sources":["C:/Users/HP/OneDrive/Documents/GitHub/New folder/parthngo/pages/api/signup.js"],"names":["initDB","User","bcrypt","req","res","name","email","password","body","status","json","error","user","findOne","hashedPassword","hash","newUser","save","console","log","message","err"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAGAF,MAAM;AAIN,gBAAe,OAAOG,GAAP,EAAWC,GAAX,KACf;AACI,QAAM;AAACC,IAAAA,IAAD;AAAMC,IAAAA,KAAN;AAAYC,IAAAA;AAAZ,MAAsBJ,GAAG,CAACK,IAAhC;;AACA,MAAG;AACK,QAAG,CAACH,IAAD,IAAS,CAACC,KAAV,IAAmB,CAACC,QAAvB,EACA;AACC,aAAOH,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,KAAK,EAAC;AAAP,OAArB,CAAP;AACA;;AACL,UAAMC,IAAI,GAAI,MAAMX,IAAI,CAACY,OAAL,CAAa;AAACP,MAAAA;AAAD,KAAb,CAApB;;AACA,QAAGM,IAAH,EACA;AACI,aAAOR,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,KAAK,EAAC;AAAP,OAArB,CAAP;AACH;;AACL,UAAMG,cAAc,GAAG,MAAMZ,MAAM,CAACa,IAAP,CAAYR,QAAZ,EAAqB,EAArB,CAA7B;AACA,UAAMS,OAAO,GAAG,MAAM,IAAIf,IAAJ,CAClB;AACII,MAAAA,IADJ;AAEIC,MAAAA,KAFJ;AAGIC,MAAAA,QAAQ,EAACO;AAHb,KADkB,EAKfG,IALe,EAAtB;AAMIC,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAZ,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACU,MAAAA,OAAO,EAAC;AAAT,KAArB;AACH,GAnBD,CAoBA,OAAMC,GAAN,EACA;AACIH,IAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACH;AACJ,CA3BD","sourcesContent":["import initDB from '../../helpers/initDB'\r\nimport User from '../../models/User'\r\nimport bcrypt from 'bcryptjs'\r\n\r\n\r\ninitDB()\r\n\r\n\r\n\r\nexport default async (req,res)=>\r\n{\r\n    const {name,email,password}=req.body\r\n    try{\r\n            if(!name || !email || !password)\r\n            {\r\n             return res.status(422).json({error:\"Please all the field\"})\r\n            }\r\n        const user =  await User.findOne({email})\r\n        if(user)\r\n        {\r\n            return res.status(422).json({error:\"User Already exists with the email\"})\r\n        }\r\n    const hashedPassword = await bcrypt.hash(password,12)\r\n    const newUser = await new User(\r\n        {\r\n            name,\r\n            email,\r\n            password:hashedPassword\r\n        }).save()\r\n        console.log(newUser)\r\n        res.status(201).json({message:\"Signup Successfully\"})\r\n    }\r\n    catch(err)\r\n    {\r\n        console.log(err)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}